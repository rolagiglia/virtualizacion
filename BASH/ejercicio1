#! /usr/bin/bash

#Funcion para mostrar ayuda
mostrarAyuda() {
  cat <<EOF
Ayuda del script: $0 [OPCIONES]

Descripcion:
Procesa archivos CSV con temperaturas y genera un resumen por día y ubicación en formato JSON. La salida puede ser por pantalla(-p) o por archivo (-a <nombre de archivo>).

Opciones:
  -d, --directorio <ruta>   Directorio que contiene los archivos CSV a procesar (obligatorio)
  -a, --archivo <archivo>   Archivo JSON de salida. No permite utilizarse en simultaneo con -p
  -p, --pantalla            Muestra el JSON generado por pantalla. No permite su uso en simultaneo con -a
  -h, --help                Muestra esta ayuda.

Ejemplos:
  $0 -d "./datos" -p
  $0 --directorio /home/usuario/mediciones --archivo resultado.json
EOF
}

#Funcion para validar fechas
validar_fecha() {
	local fecha="$1"
	local fecha_normalizada=""

    if [[ "$fecha" =~ ^[0-9]{4}[-/][0-9]{2}[-/][0-9]{2}$ ]]; then
        # YYYY-MM-DD o YYYY/MM/DD
        fecha_normalizada="${fecha//\//-}"

    elif [[ "$fecha" =~ ^[0-9]{2}[-/][0-9]{2}[-/][0-9]{4}$ ]]; then
        # DD-MM-YYYY o DD/MM/YYYY
        fecha_normalizada="${fecha//\//-}"
        local dia="${fecha_normalizada:0:2}"
        local mes="${fecha_normalizada:3:2}"
        local anio="${fecha_normalizada:6:4}"
        fecha_normalizada="$anio-$mes-$dia"
    else
        return 1
    fi

    date -d "$fecha_normalizada" "+%Y-%m-%d" >/dev/null 2>&1
}

#Trap ejecuta limpiar_temporales cuando el script termine
trap "rm -f $archivo_temporal" EXIT


#Procesa opciones
opciones=`getopt -o d:a:ph --long directorio:,archivoOut:,pantalla,help -- "$@"`

if [ "$?" -ne 0 ]; then
	echo "Error: Faltan parametros. Use -h para ayuda." >&2
	exit 1
fi

eval set -- "$opciones"

#Variables para los parametros y errores
directorio=""
archivoOut=""
pantalla=false
errores=""

#Lee parametros
while true; do
	case "$1" in
		-d | --directorio) 
			if [[ -z "$2" || "$2" == -* || ! -d "$2" ]]; then
        			errores="$errores \n Error: No se ha ingresado un directorio valido para la lectura de los archivos '.cvs'"
			else
				directorio="$2"
				shift
			fi
			shift 
			;;
		-a | --archivoOut) 
			if [[ -z "$2" || "$2" == -* ]]; then
                       		errores="$errores\nError: No se ha ingresado un nombre de archivo de salida"
                        else
				if [[ "$pantalla" == true ]];then
					errores="$errores\nNo se puede seleccionar -p (salida por pantalla) y -a (salida por archivo al mismo tiempo)"
				else
					archivoOut="$2"
				fi
				shift
			fi
                	shift
			;;
		-p | --pantalla) 
			if [[ -n "$archivoOut" ]]; then 
				errores="$errores\nNo se puede seleccionar -p (salida por pantalla) y -a (salida por archivo al mismo tiempo)"
			else
				pantalla=true;
			fi
			shift 
			;;
		-h | --help) mostrarAyuda;
		exit 0 
		;;
		--) shift;
		break 
		;;
		*) errors="$errores \n Error: Los parametros no son validos. Use -h para ayuda."
		shift
		;;
	esac
done

#Validaciones adicionales

if [[ -z "$errores" && -z "$directorio" ]]; then
	errores="$errores\nNo se indico un directorio para lectura de archivos csv."
fi
if [[ -z "$archivoOut" && "$pantalla" == false ]]; then
	errores="$errores \n Error: debe seleccionar -p (salida por pantalla) o -a <nombredearchivo> (salida por archivo)"
fi

if [[ -n "$errores" ]];then
	echo -e $errores
	exit 1
fi

## Validar que haya archivos .csv en el directorio

#Shopt: los patrones que no coincidan con ningún archivo se expanden a una cadena vacía.
shopt -s nullglob

csv_files=("$directorio"/*.csv)

if [ ${#csv_files[@]} -eq 0 ]; then
	echo "Error: No hay archivos CSV en el directorio $directorio." >&2
	exit 1
fi


# Verifico las fechas de los nombres de archivos

cantidad_archivos=0
archivos_validos=()

for archivo in "${csv_files[@]}"; do
    fecha_archivo=$(basename "$archivo" .csv)

    if validar_fecha "$fecha_archivo"; then
        archivos_validos+=("$archivo")
	((cantidad_archivos++))
    fi
done


archivo_temporal=$(mktemp)

#Trap ejecuta limpiar_temporales cuando el script termine
trap "rm -f $archivo_temporal" EXIT

# Usamos awk para procesar todos los archivos validos
awk -F',' '
    function validar_fecha(f) {
        return f ~ /^[0-9]{4}[-/][0-9]{2}[-/][0-9]{2}$/ || f ~ /^[0-9]{2}[-/][0-9]{2}[-/][0-9]{4}$/
    }

    function normalizar_fecha(f) {
           gsub(/[\/\-]/, "-", f);
        split(f, a, "-");
        if (length(a[1]) == 4) {
                return a[1]"-"a[2]"-"a[3]
        } else {
                return a[3]"-"a[2]"-"a[1]
        }
    }
    function validar_hora(h) {
        return h ~ /^[0-9]{2}:[0-9]{2}:[0-9]{2}$/
    }
    function validar_temperatura(t) {
        return t ~ /^-?[0-9]+(\.[0-9]+)?$/
    }
    function validar_ubicacion(u) {
        return (u == "Norte" || u == "Sur" || u == "Este" || u == "Oeste")
    }
    
    {
     # Validar la fecha, hora, temperatura y ubicación
     fecha=$2;
     hora=$3;
     ubicacion=$4;
     temp=$5;
     # Validar fecha
        if (!validar_fecha(fecha)){
            next
	}
	fecha=normalizar_fecha(fecha)
        # Validar hora
        if (!validar_hora(hora)) {
            next
        }

        # Validar temperatura
        if (!validar_temperatura(temp)) {
            next
        }

        # Validar ubicación
        if (!validar_ubicacion(ubicacion)) {
            next
        }

    key = fecha SUBSEP ubicacion

    suma[key] += temp
    conteo[key]++

    if ((key in min) == 0 || temp < min[key])
        min[key] = temp
    if ((key in max) == 0 || temp > max[key])
        max[key] = temp

    fechas[fecha] = 1
}
END {
    print "{"
    primer_fecha = 1
    for (f in fechas) {
        if (!primer_fecha)
            print "  },"
        print "  \"" f "\": {"

        primer_ubicacion = 1
        for (k in suma) {
            split(k, arr, SUBSEP)
            fecha_actual = arr[1]
            ubicacion = arr[2]

            if (fecha_actual == f) {
                if (!primer_ubicacion)
                    print "    },"
                print "    \"" ubicacion "\": {"
                print "      \"Min\": " min[k] ","
                print "      \"Max\": " max[k] ","
                print "      \"Promedio\": " suma[k] / conteo[k]
                primer_ubicacion = 0
            }
        }
        print "    }"
        primer_fecha = 0
    }
    print "  }"
    print "}"
}
' "${archivos_validos[@]}" >> "$archivo_temporal"

# Mostrar el resultado dependiendo de si se requiere salida por pantalla o archivo
if [ "$pantalla" = true ]; then
    cat "$archivo_temporal"
else
    mv "$archivo_temporal" $archivoOut".json"
    echo "Procesamiento completado. Resultados guardados en $archivoOut.json."
fi

echo "Se procesaron $cantidad_archivos archivos .csv ." 
